#declare participants
P : Provider{1} 

#declare participants with selection
Index I = {1...}
S : Subscriber{i : I}


#declare channels
Index J = {1..}
Channel: s{j: J} m{j: J}

#declare labels 

Label l: {fsub: {true, false}, sub: {true}}

#we can use branching and selection operator on labels and 

#declare resursive global type
G = rec t. 
    S[i] -> P : s[j]<Callback>*{
        fsub:
            true: 
                S[i] -> P : m[j]<Message>;
                P -> S[i]: m[j]<Message>;
                end.
            false:
                end.

        sub:
            S[i] -> P : m[j]<Message>;
            P -> S[i]: m[j]<Message>;
            end.
    }.
    t.


# issue 1: we can recieve and send messages at the same time (as we use that channel !)
# issue 2: two S[i] could send at the same time ! (no selection built in, so we need different channels)


Participant S{n}
Participant P{1}
Participant T{m}


Index I = {1..n} #subscribers
Index J = {1..t} #Topics

Channel g{1}
Channel q{i: I} #task queue
Channel s{i: J} #Topics to Subscribe to

Subscribe =
    foreach(i: I) {
        foreach(j: J) {
            T[j] -> S[i]: s[j]<Topic>{
                subscribe: S[i] -> T[j] : s[j]::h<Callback>. end #provide callback
                not_subscribe: end
            }
        }
    }

Topic_Event{j: J} = Rec X {
    P -> T[j] : s[j]<Message>.
    foreach(i::s[j]) {
        T[j] -> S[i]: q[i]::h<Message>.
        ?S[i] -> P: g<Message>.
    }
} | X


Publisher_Subscriber = Subscribe. Rec X {Topic_Event | X}
